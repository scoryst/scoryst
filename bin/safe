#!/usr/bin/env python
from django.core import management
from scorystproject import settings
import argparse


def main():
  """ Allows user to interface with Scoryst safe. """
  # set up django environment
  management.setup_environ(settings)
  from safe.safe import Safe
  safe = Safe()

  safe_parser = argparse.ArgumentParser(prog='safe', description='Access Scoryst safe.')
  safe_subparsers = safe_parser.add_subparsers()

  # add store subcommand, which allows a user to store a document
  store_parser = safe_subparsers.add_parser('store', help='store a document into the safe.')
  store_parser.add_argument('document_name', help='Document name to store.')
  store_parser.set_defaults(func=handle_store)

  # add cat subcommand, which allows a user to read a document
  cat_parser = safe_subparsers.add_parser('cat', help='read a document from the safe.')
  cat_parser.add_argument('document_name', help='Document name to read.')
  cat_parser.set_defaults(func=handle_cat)

  # add ls subcommand, which allows a user to list all stored documents
  ls_parser = safe_subparsers.add_parser('ls', help='List documents in safe.')
  ls_parser.set_defaults(func=handle_ls)

  # add rm subcommand, which allows a user to delete a document
  rm_parser = safe_subparsers.add_parser('rm', help='Delete document from safe.')
  rm_parser.add_argument('document_name', help='Document name to delete.')
  rm_parser.set_defaults(func=handle_rm)

  # add release subcommand, which allows one user to release a document to another user
  release_parser = safe_subparsers.add_parser('release',
    help='Release document to another user.')
  release_parser.add_argument('document_name', help='Document name to release.')
  release_parser.add_argument('recipient_email', help='Recipient email to release to.')
  release_parser.set_defaults(func=handle_release)

  # add revoke subcommand, which allows one user to revoke a document from another user
  revoke_parser = safe_subparsers.add_parser('revoke',
    help='Revoke document from another user.')
  revoke_parser.add_argument('document_name', help='Document name to revoke.')
  revoke_parser.add_argument('recipient_email', help='Recipient email to revoke from.')
  revoke_parser.set_defaults(func=handle_revoke)

  args = safe_parser.parse_args()
  args.func(safe, args)


def handle_store(safe, args):
  """ Allows the user to store a document. """
  document_text = safe.read(args.document_name)

  if not document_text == None:
    print 'Document %s has the following contents:' % args.document_name
    print document_text

    # ask the user to confirm before overwriting
    confirm = raw_input("Are you sure you'd like to overwrite it? [y/n] ")
    if not confirm == 'y':
      print 'Cancelled.'
      return

  print "Enter the document text you'd like to store:"
  document_text = ''

  # read user input to get document text
  while True:
    try:
      document_text += raw_input() + '\n'
    except EOFError:
      break

  safe.store(args.document_name, document_text)
  print 'Document %s successfully stored.' % args.document_name


def handle_cat(safe, args):
  """ Allows the user to read a document. """
  document_text = safe.read(args.document_name)
  if document_text == None:
    print 'No such document exists.'
  else:
    print document_text


def handle_ls(safe, args):
  """ Allows the user to list stored documents. """
  documents = safe.list()
  if len(documents) > 0:
    print '\n'.join(safe.list())


def handle_rm(safe, args):
  document_text = safe.read(args.document_name)

  if document_text == None:
    print 'No such document exists.'
  else:
    print 'Document %s has the following contents:' % args.document_name
    print document_text

    # ask the user to confirm before deleting document
    confirm = raw_input("Are you sure you'd like to delete it? [y/n] ")

    if confirm == 'y':
      # confirm document exists again; it may have been deleted while we were
      # waiting for user input
      if safe.delete(args.document_name):
        print 'Document %s successfully deleted.' % args.document_name
      else:
        print 'No such document exists.'
    else:
      print 'Cancelled.'


def handle_release(safe, args):
  """ Allows the user to release a document to a recipient. """
  success = safe.release(args.document_name, args.recipient_email)
  if success:
    print ('Successfully released document %s to %s.' %
      (args.document_name, args.recipient_email))
  else:
    print ('Failed to release document %s; are you sure you can read it?' %
      args.document_name)


def handle_revoke(safe, args):
  """ Allows the user to revoke a document from a recipient. """
  success = safe.revoke(args.document_name, args.recipient_email)
  if success:
    print ('Successfully revoked document %s from %s.' %
      (args.document_name, args.recipient_email))
  else:
    print ('Failed to revoke document %s; are you sure it exists?' %
      args.document_name)


if __name__ == '__main__':
  main()
